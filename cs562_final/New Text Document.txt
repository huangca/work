
c = 9, x = 3, s = 3

    @pytest.mark.parametrize("x",[2,3,4])
    @pytest.mark.parametrize("s",[2,3,4,5])
    @pytest.mark.randomize(c=int,min_num=7, max_num=16,ncalls=100)
    def test_playCard(c,x,s):
        g=random_GameState(x,s)
        g2=random_GameState2(x,s)
        #c=d.mine
        if c==d.adventurer:
                g.hand[g.whoseTurn].insert(0,d.adventurer)
                r=d.playCard(0,-1,-1,-1,g)
                assert r==0
                assert g.hand[g.whoseTurn].pop() in (d.copper,d.silver,d.gold)
        elif c==d.ambassador:
                pass
        if c==d.baron:
                g.hand[g.whoseTurn].insert(0,d.baron)
                c1=random.randrange(0,len(g.hand[g.whoseTurn])-1)
                c2=random.randrange(-1,1)
                r=d.playCard(0,c1,c2,-1,g)
                if g.hand[g.whoseTurn][c1]==d.estate and c2==0:
                        assert r==0
                elif c2==-1:
                        assert r==0
                else:
>                       assert r==-1
E      assert 0 == -1







c = 16, x = 3, s = 3

    @pytest.mark.parametrize("x",[2,3,4])
    @pytest.mark.parametrize("s",[2,3,4,5])
    @pytest.mark.randomize(c=int,min_num=7, max_num=16,ncalls=100)
    def test_playCard(c,x,s):
        g=random_GameState(x,s)
        g2=random_GameState2(x,s)
        #c=d.mine
        if c==d.adventurer:
                g.hand[g.whoseTurn].insert(0,d.adventurer)
                r=d.playCard(0,-1,-1,-1,g)
                assert r==0
                assert g.hand[g.whoseTurn].pop() in (d.copper,d.silver,d.gold)
        elif c==d.ambassador:
                pass
        if c==d.baron:
                g.hand[g.whoseTurn].insert(0,d.baron)
                c1=random.randrange(0,len(g.hand[g.whoseTurn])-1)
                c2=random.randrange(-1,1)
                r=d.playCard(0,c1,c2,-1,g)
                if g.hand[g.whoseTurn][c1]==d.estate and c2==0:
                        assert r==0
                elif c2==-1:
                        assert r==0
                else:
                        assert r==-1
        elif c==d.council_room:
                h=len(g.hand[g.whoseTurn])
                g.hand[g.whoseTurn].insert(0,d.council_room)
                r=d.playCard(0,-1,-1,-1,g)
                assert r==0
                assert len(g.hand[g.whoseTurn])==h+4
        elif c==d.cutpurse:
                g.hand[g.whoseTurn].insert(0,d.cutpurse)
                r=d.playCard(0,-1,-1,-1,g)
                assert r==0
        elif c==d.embargo:
                g.hand[g.whoseTurn].insert(0,d.embargo)
                ct=random.randrange(7,17)
                nt=g.embargoTokens[ct]
                r=d.playCard(0,ct,-1,-1,g)
                assert r==0
                assert g.embargoTokens[ct]==nt+1
        elif c==d.feast:
                g.hand[g.whoseTurn].insert(0,d.feast)
                ch1=random.randrange(7,17)
                r=d.playCard(0,ch1,-1,-1,g)
                if d.getCost(ch1)<6:
                        assert r==0
                else:
                        assert r==-1
        elif c==d.great_hall:
                g.hand[g.whoseTurn].insert(0,d.great_hall)
                h=len(g.hand[g.whoseTurn])
                a=g.numActions
                r=d.playCard(0,-1,-1,-1,g)
                assert r==0
                assert len(g.hand[g.whoseTurn])==h
                assert g.numActions==a
        elif c==d.mine:
                g.hand[g.whoseTurn].insert(0,d.mine)
                ch1=random.randrange(1,len(g.hand[g.whoseTurn]))
                ch2=random.randrange(4,7)
                print ch1,ch2
                r=d.playCard(0,ch1,ch2,-1,g)
                if ch1==d.copper and ch2==d.silver:
                        assert r==0
                elif (ch1==d.silver or ch1==d.gold) and ch2==d.gold:
                        assert r==0
                else:
>                       assert r==-1
E      assert 0 == -1


_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

state = <dominion_p.gameState instance at 0x02F67620>

    def endTurn(state):
>       state.discard[state.whoseTurn].extend(state.hand[state.whoseTurn])
E    KeyError: 3

dominion_p.py:214: KeyError



--------------- coverage: platform win32, python 2.7.9-final-0 ----------------
Name         Stmts   Miss  Cover
--------------------------------
dominion_p     319     38    88%